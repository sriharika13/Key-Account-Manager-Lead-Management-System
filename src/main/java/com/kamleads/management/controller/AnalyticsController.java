package com.kamleads.management.controller;

import com.kamleads.management.dto.LeadPerformanceDTO;
import com.kamleads.management.dto.LeadSummaryDto;
import com.kamleads.management.dto.response.UserResponseDto;
import com.kamleads.management.service.AnalyticsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@RestController
@RequestMapping("/api/analytics")
public class AnalyticsController {

    private final AnalyticsService analyticsService;

    @Autowired
    public AnalyticsController(AnalyticsService analyticsService) {
        this.analyticsService = analyticsService;
    }

    /**
     * Retrieves a summary of lead statistics for a specific KAM.
     * Accessible by 'KAM' role.
     */
    @GetMapping("/summary/kam/{kamId}")
    @PreAuthorize("hasRole('KAM')")
    public ResponseEntity<LeadSummaryDto> getKamLeadSummary(@PathVariable UUID kamId) {
        LeadSummaryDto summary = analyticsService.getKamLeadSummary(kamId);
        return ResponseEntity.ok(summary);
    }

    /**
     * Retrieves performance analytics for leads under a specific KAM within a date range.
     * Accessible by 'KAM' role.
     */
    @GetMapping("/performance/leads/{kamId}")
    @PreAuthorize("hasRole('KAM')")
    public ResponseEntity<List<LeadPerformanceDTO>> getLeadPerformanceAnalytics(
            @PathVariable UUID kamId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        List<LeadPerformanceDTO> analytics = analyticsService.getLeadPerformanceAnalytics(kamId, startDate, endDate);
        return ResponseEntity.ok(analytics);
    }

    /**
     * Retrieves the count of interactions by type for a specific KAM.
     * Accessible by 'KAM' role.
     */
    @GetMapping("/interactions/counts-by-type/{kamId}")
    @PreAuthorize("hasRole('KAM')")
    public ResponseEntity<Map<String, Long>> getInteractionCountsByKamAndType(@PathVariable UUID kamId) {
        Map<String, Long> counts = analyticsService.getInteractionCountsByKamAndType(kamId);
        return ResponseEntity.ok(counts);
    }

    /**
     * Retrieves the distribution of leads by status for a specific KAM.
     * Accessible by 'KAM' role.
     */
    @GetMapping("/leads/status-distribution/{kamId}")
    @PreAuthorize("hasRole('KAM')")
    public ResponseEntity<Map<String, Long>> getLeadStatusDistributionByKam(@PathVariable UUID kamId) {
        Map<String, Long> distribution = analyticsService.getLeadStatusDistributionByKam(kamId);
        return ResponseEntity.ok(distribution);
    }

    /**
     * Retrieves the total order value generated by a KAM within a specified date range.
     * Accessible by 'KAM' role.
     */
    @GetMapping("/orders/total-value/{kamId}")
    @PreAuthorize("hasRole('KAM')")
    public ResponseEntity<BigDecimal> getTotalOrderValueByKam(
            @PathVariable UUID kamId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDate) {
        BigDecimal totalValue = analyticsService.getTotalOrderValueByKam(kamId, startDate, endDate);
        return ResponseEntity.ok(totalValue);
    }

    /**
     * Retrieves a list of top-performing KAMs.
     * Accessible by 'KAM' role.
     */
    @GetMapping("/kams/top-performing")
    @PreAuthorize("hasRole('KAM')")
    public ResponseEntity<Page<UserResponseDto>> getTopPerformingKams(Pageable pageable) {
        Page<UserResponseDto> topKams = analyticsService.getTopPerformingKams(pageable);
        return ResponseEntity.ok(topKams);
    }
}
